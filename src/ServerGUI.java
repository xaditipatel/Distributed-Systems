
// Submitted by Aditi Patel
// ID: 1001704419

import java.awt.Dimension;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.net.MalformedURLException;
import java.net.ServerSocket;
import java.net.SocketException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.logging.ConsoleHandler;
import java.util.logging.FileHandler;
import java.util.logging.Handler;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;

import javax.swing.JEditorPane;
import javax.swing.JScrollPane;
import javax.swing.WindowConstants;
import javax.swing.text.Document;
/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author DELL
 */
public class ServerGUI extends javax.swing.JFrame {

	private static final long serialVersionUID = 1L;
	static Server server;
	static List<String> connectedClients = new ArrayList<String>();
	public static int aliveClientsNum = 0;
	static HashMap<Character, ArrayList<String>> identifiersMap = new HashMap<>();
    static Logger logger = Logger.getLogger(ServerGUI.class.getName());

	/**
	 * Creates new form Server
	 */
	public ServerGUI() {
		initComponents();
		jTextArea1.setText("WAITING FOR CLIENT TO CONNECT \n");
		jTextArea2.setText("LIST OF CONNECTED SERVERS \n");
		
		enableLogger();
		this.setDefaultCloseOperation(WindowConstants.DO_NOTHING_ON_CLOSE);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
	// <editor-fold defaultstate="collapsed" desc="Generated Code">
	private void initComponents() {

		jScrollPane1 = new javax.swing.JScrollPane();
		jTextArea1 = new javax.swing.JTextArea();
		jScrollPane2 = new javax.swing.JScrollPane();
		jTextArea2 = new javax.swing.JTextArea();
		logPane = new javax.swing.JEditorPane();
		Exit = new javax.swing.JButton();

		setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

		jTextArea1.setColumns(20);
		jTextArea1.setRows(5);
		jScrollPane1.setViewportView(jTextArea1);

		jTextArea2.setColumns(20);
		jTextArea2.setRows(5);
		jScrollPane2.setViewportView(jTextArea2);

		logPane.setEditable(false);
		//Put the editor pane in a scroll pane.
		JScrollPane editorScrollPane = new JScrollPane(logPane);
		editorScrollPane.setVerticalScrollBarPolicy(
		                JScrollPane.VERTICAL_SCROLLBAR_ALWAYS);
		editorScrollPane.setPreferredSize(new Dimension(250, 145));
		editorScrollPane.setMinimumSize(new Dimension(10, 10));
		
		Exit.setText("Exit");
		Exit.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				ExitActionPerformed(evt);
			}
		});

		javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
		getContentPane().setLayout(layout);
		layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup().addGap(26, 26, 26)
								.addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
										.addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 470,
												Short.MAX_VALUE)
										.addComponent(jScrollPane1)
										.addComponent(editorScrollPane))
								.addContainerGap())
				.addGroup(javax.swing.GroupLayout.Alignment.TRAILING,
						layout.createSequentialGroup()
								.addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
								.addComponent(Exit).addGap(34, 34, 34)));
		layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
				.addGroup(layout.createSequentialGroup().addContainerGap()
						.addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 220,
								javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 167, Short.MAX_VALUE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
						.addComponent(editorScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 220, javax.swing.GroupLayout.PREFERRED_SIZE)
						.addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED).addComponent(Exit)));

		pack();
	}// </editor-fold>

	private void ExitActionPerformed(java.awt.event.ActionEvent evt) {
		// TODO add your handling code here:
		System.exit(0);
	}

	// Function to set the on-going process/operations on server in the textArea
	public static void setTextArea(String msg) {
		jTextArea1.setText(jTextArea1.getText().trim() + msg);
	}

	// Function to populate currently connected Clients Usernames
	public static void addConnectedClientsUsername(String username) {
		connectedClients.add(username);
		jTextArea2.setText("");
		for (String s : connectedClients)
			jTextArea2.setText(jTextArea2.getText() + s + " ");
	}
	
	// Function to create logger
	public static void enableLogger() {
		try {
            LogManager.getLogManager().readConfiguration(new FileInputStream("mylogging.properties"));
        } catch (SecurityException | IOException e1) {
            e1.printStackTrace();
        }
        logger.setLevel(Level.FINE);
        logger.addHandler(new ConsoleHandler());
        //adding custom handler
        logger.addHandler(new LogHandler());
        try {
            //FileHandler file name with max size and number of log files limit
            Handler fileHandler = new FileHandler("logger.log");
            fileHandler.setFormatter(new LogFormatter());
            //setting custom filter for FileHandler
            fileHandler.setFilter(new LogFilter());
            logger.addHandler(fileHandler);
        } catch (SecurityException | IOException e) {
            e.printStackTrace();
        }
	}
	// Function to populate logs
	public static void populateLog(String filename) {
			if(filename != null) {
				try {
					Document doc = logPane.getDocument();
					doc.putProperty(Document.StreamDescriptionProperty, null);
					logPane.setPage("file:/C:/Users/DELL/eclipse-workspace/CentralizedFileSystems/"+filename);
				} catch (MalformedURLException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
			}
			else {
	            System.err.println("Couldn't find file");
			}
	}

	public static boolean getConnectClientsusername(String username) {
		if (connectedClients.contains(username))
			return true;
		return false;
	}

	// Function to deleting username once Client is disconnected
	public static void deleteConnectedClientsUsername(String username) {
		System.out.println(username);
		connectedClients.remove(username);
		jTextArea2.setText("");
		for (String s : connectedClients)
			jTextArea2.setText(jTextArea2.getText() + s + " ");
	}

	public static void initIdentifiersMap() {
		// A map to store identifier as key and currently assigned/available as value

		ArrayList<String> arraylistA = new ArrayList<String>();
		arraylistA.add("F");
		arraylistA.add("Default");

		ArrayList<String> arraylistB = new ArrayList<String>();
		arraylistB.add("F");
		arraylistB.add("Default");

		ArrayList<String> arraylistC = new ArrayList<String>();
		arraylistC.add("F");
		arraylistC.add("Default");

		identifiersMap.put('A', arraylistA);
		identifiersMap.put('B', arraylistB);
		identifiersMap.put('C', arraylistC);

	}

	
	public static Character getAvailableIdentifier(HashMap<Character, ArrayList<String>> hm) {
		// iterating over a map
		for (Map.Entry<Character, ArrayList<String>> listEntry : hm.entrySet()) {
			if (listEntry.getValue().get(0).equals("F"))
				return listEntry.getKey();
		}
		return null;
	}

	public static void setIdentifiersMap(Character key, HashMap<Character, ArrayList<String>> hm, String username) {
		hm.replace(key, new ArrayList<>(Arrays.asList("T", username)));
	}

	public static void resetIdentifiersMap(HashMap<Character, ArrayList<String>> hm, String username) {
		for (Map.Entry<Character, ArrayList<String>> listEntry : hm.entrySet()) {
			if (listEntry.getValue().get(1).equals(username))
				hm.replace(listEntry.getKey(), new ArrayList<>(Arrays.asList("F", "Default")));
		}
	}

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) throws IOException {
		/* Set the Nimbus look and feel */
		// <editor-fold defaultstate="collapsed" desc=" Look and feel setting code
		// (optional) ">
		/*
		 * If Nimbus (introduced in Java SE 6) is not available, stay with the default
		 * look and feel. For details see
		 * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
		// </editor-fold>
		// </editor-fold>
		// </editor-fold>
		// </editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new ServerGUI().setVisible(true);
			}
		});

		ServerSocket listener = null; // Initialize a server socket object and assign it to null
		initIdentifiersMap(); // Initialize identifiers for local copy
	
		// Creating socket to accept clients and maintaining currently connected clients
		try {
			listener = new ServerSocket(1201);
			while (ServerGUI.aliveClientsNum < 3) {
				server = new Server(listener.accept());
				server.start();
				ServerGUI.aliveClientsNum++;
			}

		} catch (SocketException se) {
			java.util.logging.Logger.getLogger(ServerGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, se);
		} finally {

			listener.close(); // Closing the socket
		}
	}

	// Variables declaration - do not modify
	private javax.swing.JButton Exit;
	private javax.swing.JScrollPane jScrollPane1;
	private javax.swing.JScrollPane jScrollPane2;
	private static javax.swing.JTextArea jTextArea1;
	private static javax.swing.JTextArea jTextArea2;
	private static javax.swing.JEditorPane logPane;
	// End of variables declaration
}
